name: Deploy Homelab

on:
  push:
    branches: [main]
    paths:
      - 'homelab/**'
      - 'deploy/deploy.sh'
      - 'deploy/deploy-homelab.sh'
      - 'deploy/setup-secrets.sh'
      - '.github/workflows/deploy-homelab.yml'
  workflow_dispatch:
    inputs:
      service:
        description: 'Specific service to deploy (leave empty for all)'
        required: false
        type: string

env:
  DEPLOY_DIR: '/home/dev/docker/docker-configs'

jobs:
  validate:
    name: Validate Homelab Services
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create temporary .env files for validation
        run: |
          # Create temporary .env files with placeholder values
          mkdir -p homelab/traefik
          echo "CLOUDFLARE_EMAIL=test@example.com" > homelab/traefik/.env
          echo "CLOUDFLARE_API_TOKEN=test_token" >> homelab/traefik/.env
          echo "DOMAIN=example.com" >> homelab/traefik/.env
          echo "TRAEFIK_DASHBOARD_USER=admin" >> homelab/traefik/.env
          echo "TRAEFIK_DASHBOARD_PASSWORD=test" >> homelab/traefik/.env

      - name: Validate Traefik compose
        run: docker compose -f homelab/traefik/docker-compose.yaml config > /dev/null

      - name: Validate Homepage compose
        run: docker compose -f homelab/homepage/docker-compose.yaml config > /dev/null

      - name: Validate Jellyfin compose
        run: docker compose -f homelab/jellyfin/compose.yaml config > /dev/null

      - name: Validate Servarr compose
        run: docker compose -f homelab/servarr/compose.yaml config > /dev/null

      - name: Validate RustDesk compose
        run: docker compose -f homelab/rustdesk/docker-compose.yml config > /dev/null

      - name: Check for hardcoded secrets
        run: |
          # Check for actual hardcoded secrets (not env variable references)
          # Exclude patterns like ${VAR} or $VAR which are environment variable references
          if grep -rE '(CLOUDFLARE_API_TOKEN|TRAEFIK_DASHBOARD_PASSWORD)\s*[:=]\s*["\047][^$\{]' --include="*.yaml" --include="*.yml" --exclude-dir=".github" homelab/; then
            echo "⚠️  Warning: Found hardcoded secrets in compose files"
            exit 1
          fi
          echo "✅ No hardcoded secrets found (env variable references are OK)"

  deploy:
    name: Deploy to Homelab Server
    runs-on: self-hosted
    needs: validate
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Clean workspace
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE 2>/dev/null || true
          sudo git clean -fdx 2>/dev/null || true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync to deployment directory
        run: |
          echo "Syncing homelab code to ${{ env.DEPLOY_DIR }}"

          mkdir -p "${{ env.DEPLOY_DIR }}"

          # Sync code excluding runtime data and secrets
          rsync -rlD --delete \
            --no-perms --no-owner --no-group \
            --exclude='.git' \
            --exclude='*/.env' \
            --exclude='*.log' \
            --exclude='.backups/' \
            --exclude='homelab/traefik/cf-token' \
            --exclude='homelab/traefik/config/acme.json' \
            --exclude='homelab/traefik/logs/' \
            --exclude='homelab/homepage/config/' \
            --exclude='homelab/jellyfin/config/' \
            --exclude='homelab/jellyfin/jellyseerr/' \
            --exclude='homelab/jellyfin/jellystat/' \
            --exclude='homelab/servarr/*/config/' \
            --exclude='homelab/rustdesk/data/' \
            --exclude='teaching/' \
            $GITHUB_WORKSPACE/ "${{ env.DEPLOY_DIR }}/" || { echo "⚠️ Some files couldn't be synced"; exit 0; }

          echo "✅ Code synced successfully"

      - name: Setup secrets
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          TRAEFIK_DASHBOARD_USER: ${{ secrets.TRAEFIK_DASHBOARD_USER }}
          TRAEFIK_DASHBOARD_PASSWORD: ${{ secrets.TRAEFIK_DASHBOARD_PASSWORD }}
          DOMAIN: ${{ secrets.DOMAIN }}
          TWINGATE_NETWORK: ${{ secrets.TWINGATE_NETWORK }}
          TWINGATE_ACCESS_TOKEN: ${{ secrets.TWINGATE_ACCESS_TOKEN }}
          TWINGATE_REFRESH_TOKEN: ${{ secrets.TWINGATE_REFRESH_TOKEN }}
        run: |
          cd ${{ env.DEPLOY_DIR }}

          # Create Cloudflare token file for Traefik
          echo "${{ secrets.CLOUDFLARE_API_TOKEN }}" > homelab/traefik/cf-token
          chmod 600 homelab/traefik/cf-token
          echo "✅ Created cf-token file"

          # Generate htpasswd hash for Traefik dashboard
          TRAEFIK_DASHBOARD_CREDENTIALS=$(echo "${{ secrets.TRAEFIK_DASHBOARD_PASSWORD }}" | openssl passwd -apr1 -stdin | sed -e 's/\$/\$\$/g')
          TRAEFIK_DASHBOARD_CREDENTIALS="${{ secrets.TRAEFIK_DASHBOARD_USER }}:${TRAEFIK_DASHBOARD_CREDENTIALS}"
          echo "✅ Generated dashboard credentials"

          # Create Traefik .env
          cat > homelab/traefik/.env << EOF
          CLOUDFLARE_EMAIL=${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}
          DOMAIN=${{ secrets.DOMAIN }}
          TRAEFIK_DASHBOARD_USER=${{ secrets.TRAEFIK_DASHBOARD_USER }}
          TRAEFIK_DASHBOARD_PASSWORD=${{ secrets.TRAEFIK_DASHBOARD_PASSWORD }}
          TRAEFIK_DASHBOARD_CREDENTIALS=${TRAEFIK_DASHBOARD_CREDENTIALS}
          EOF

          chmod 600 homelab/traefik/.env
          echo "✅ Secrets configured"

          # Create Twingate .env (required for deployment)
          if [ -z "${TWINGATE_NETWORK}" ] || [ -z "${TWINGATE_ACCESS_TOKEN}" ] || [ -z "${TWINGATE_REFRESH_TOKEN}" ]; then
            echo "❌ Missing one or more Twingate secrets (TWINGATE_NETWORK, TWINGATE_ACCESS_TOKEN, TWINGATE_REFRESH_TOKEN)"
            exit 1
          fi

          cat > homelab/twingate/.env << EOF
          TWINGATE_NETWORK=${TWINGATE_NETWORK}
          TWINGATE_ACCESS_TOKEN=${TWINGATE_ACCESS_TOKEN}
          TWINGATE_REFRESH_TOKEN=${TWINGATE_REFRESH_TOKEN}
          EOF

          chmod 600 homelab/twingate/.env
          echo "✅ Twingate secrets configured"

      - name: Deploy homelab services
        run: |
          cd ${{ env.DEPLOY_DIR }}
          bash deploy/deploy.sh --server homelab ${{ github.event.inputs.service || 'all' }}

      - name: Deployment summary
        run: |
          echo "🚀 Homelab deployment completed"
          echo "📦 Service: ${{ github.event.inputs.service || 'all' }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
