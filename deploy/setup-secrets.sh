#!/bin/bash
set -e

# Secrets Management Script
# This script creates/updates .env files from environment variables
# Called by the deployment script to populate secrets from GitHub

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

REPO_DIR="${REPO_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)}"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create Traefik .env file
setup_traefik_env() {
    local env_file="$REPO_DIR/traefik/.env"

    log_info "Setting up Traefik environment..."

    if [ -z "$TRAEFIK_DASHBOARD_USER" ] || [ -z "$TRAEFIK_DASHBOARD_PASSWORD" ]; then
        log_warning "TRAEFIK_DASHBOARD_USER or TRAEFIK_DASHBOARD_PASSWORD not set, skipping"
        return 0
    fi

    cat > "$env_file" <<EOF
# Traefik Dashboard Authentication
TRAEFIK_DASHBOARD_USER=${TRAEFIK_DASHBOARD_USER}
TRAEFIK_DASHBOARD_PASSWORD=${TRAEFIK_DASHBOARD_PASSWORD}

# Domain Configuration
DOMAIN=${DOMAIN:-plexlab.site}

# Email for Let's Encrypt
ACME_EMAIL=${ACME_EMAIL:-admin@${DOMAIN}}

# Generated by deploy/setup-secrets.sh
# Last updated: $(date)
EOF

    chmod 600 "$env_file"
    log_success "Traefik .env created"
}

# Create Traefik Cloudflare token file
setup_traefik_cf_token() {
    local token_file="$REPO_DIR/traefik/cf-token"

    log_info "Setting up Cloudflare API token..."

    if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
        log_warning "CLOUDFLARE_API_TOKEN not set, skipping"
        return 0
    fi

    echo "$CLOUDFLARE_API_TOKEN" > "$token_file"
    chmod 600 "$token_file"
    log_success "Cloudflare token created"
}

# Create root .env file
setup_root_env() {
    local env_file="$REPO_DIR/.env"

    log_info "Setting up root environment file..."

    cat > "$env_file" <<EOF
# Homelab Environment Configuration
# Generated by deploy/setup-secrets.sh
# Last updated: $(date)

# ==============================================
# TRAEFIK CONFIGURATION
# ==============================================
TRAEFIK_DASHBOARD_USER=${TRAEFIK_DASHBOARD_USER:-admin}
TRAEFIK_DASHBOARD_PASSWORD=${TRAEFIK_DASHBOARD_PASSWORD:-changeme}
CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN:-}
CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL:-}
DOMAIN=${DOMAIN:-plexlab.site}

# ==============================================
# PIHOLE CONFIGURATION
# ==============================================
PIHOLE_PASSWORD=${PIHOLE_PASSWORD:-changeme}
PIHOLE_DNS1=${PIHOLE_DNS1:-172.70.9.2#5053}
PIHOLE_DNS2=${PIHOLE_DNS2:-9.9.9.9}
PIHOLE_DOMAIN=${PIHOLE_DOMAIN:-nexuswarrior.site}

# ==============================================
# HOMEPAGE CONFIGURATION
# ==============================================
HOMEPAGE_DOMAIN=${HOMEPAGE_DOMAIN:-list.plexlab.site}
DOCKER_SOCKET_PROXY_PORT=${DOCKER_SOCKET_PROXY_PORT:-2375}

# ==============================================
# RUSTDESK CONFIGURATION
# ==============================================
RUSTDESK_KEY=${RUSTDESK_KEY:-}
RUSTDESK_RELAY=${RUSTDESK_RELAY:-}

# ==============================================
# CODE-SERVER CONFIGURATION
# ==============================================
CODE_SERVER_DOMAIN=${CODE_SERVER_DOMAIN:-tinkeringturtle.site}
CODE_SERVER_PASSWORD=${CODE_SERVER_PASSWORD:-}
CODE_SERVER_BASE_DIR=${CODE_SERVER_BASE_DIR:-/home/docker/code-server}

# ==============================================
# NETWORK CONFIGURATION
# ==============================================
DOCKER_NETWORK=${DOCKER_NETWORK:-proxy}
PIHOLE_NETWORK_SUBNET=${PIHOLE_NETWORK_SUBNET:-172.70.9.0/29}

# ==============================================
# DEPLOYMENT CONFIGURATION
# ==============================================
BACKUP_RETENTION=${BACKUP_RETENTION:-5}
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}

# ==============================================
# TRUENAS CONFIGURATION
# ==============================================
TRUENAS_IP=${TRUENAS_IP:-}
NFS_MOUNT_OPTIONS=${NFS_MOUNT_OPTIONS:-vers=4,soft,timeo=600,retrans=2,rsize=131072,wsize=131072}
EOF

    chmod 600 "$env_file"
    log_success "Root .env created"
}

# Update Pi-hole docker-compose with password from env
setup_pihole_password() {
    local compose_file="$REPO_DIR/Piholev6/docker-compose.yaml"

    if [ -z "$PIHOLE_PASSWORD" ]; then
        log_warning "PIHOLE_PASSWORD not set, skipping Pi-hole password update"
        return 0
    fi

    if [ ! -f "$compose_file" ]; then
        log_warning "Pi-hole compose file not found, skipping"
        return 0
    fi

    log_info "Updating Pi-hole password..."

    # Backup original
    cp "$compose_file" "$compose_file.bak"

    # Replace hardcoded password with environment variable
    if grep -q "WEBPASSWORD:" "$compose_file"; then
        sed -i.tmp "s/WEBPASSWORD:.*/WEBPASSWORD: \${PIHOLE_PASSWORD:-changeme}/" "$compose_file"
        rm -f "$compose_file.tmp"
        log_success "Pi-hole password updated to use environment variable"
    fi
}

# Verify required secrets
verify_secrets() {
    log_info "Verifying secrets..."

    local missing_secrets=()

    # Critical secrets
    if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
        missing_secrets+=("CLOUDFLARE_API_TOKEN")
    fi

    if [ -z "$TRAEFIK_DASHBOARD_PASSWORD" ]; then
        missing_secrets+=("TRAEFIK_DASHBOARD_PASSWORD")
    fi

    if [ ${#missing_secrets[@]} -gt 0 ]; then
        log_warning "Missing critical secrets: ${missing_secrets[*]}"
        log_warning "Some services may not work correctly"
        return 1
    fi

    log_success "All critical secrets present"
    return 0
}

# Main function
main() {
    log_info "=========================================="
    log_info "Setting up secrets from environment"
    log_info "=========================================="

    # Create secret files
    setup_root_env
    setup_traefik_env
    setup_traefik_cf_token
    setup_pihole_password

    # Verify
    verify_secrets || log_warning "Proceeding with missing secrets..."

    log_info "=========================================="
    log_success "Secrets setup complete"
    log_info "=========================================="
}

main
